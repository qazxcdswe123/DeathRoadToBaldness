/*
在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。

每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 n-1n−1 次合并之后， 就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。

因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 11 ，并且已知果子的种类 数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。

例如有 33 种果子，数目依次为 11 ， 22 ， 99 。可以先将 11 、 22 堆合并，新堆数目为 33 ，耗费体力为 33 。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 1212 ，耗费体力为 1212 。所以多多总共耗费体力 =3+12=15=3+12=15 。可以证明 1515 为最小的体力耗费值。

第一行是一个整数 n ，表示果子的种类数
第二行包含 nn 个整数，用空格分隔，第 ii 个整数 a_i(1\leq a_i\leq 20000)1≤a_i≤20000 表示第 ii 种果子的数目
一个整数，也就是最小的体力耗费值。输入数据保证这个值小于 2^{31}

Sample Input
3 
1 2 9

Sample Output
15
*/

#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int main()
{
    // freopen("input.in", "r", stdin);
    
    int n;
    cin >> n;
    priority_queue<int, vector<int>, greater<int> > q;
    for (int i = 0; i < n; i++)
    {
        int a;
        cin >> a;
        q.push(a);
    }

    int sum = 0;
    while (q.size() > 1)
    {
        int a = q.top();
        q.pop();
        int b = q.top();
        q.pop();
        sum += a + b;
        q.push(a + b);
    }

    cout << sum << endl;
}