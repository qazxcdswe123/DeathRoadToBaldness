//-----------------------------------01【程序说明】----------------------------------------------
//  描述：数据结构主程序
// STD_INPUT_HANDLE      // 标准输入设备句柄（键盘上标准输入）
// STD_OUTPUT_HANDLE     // 标准输出设备句柄（屏幕上标准输出）
// STD_ERROR_HANDLE      // 标准错误句柄

//------------------------------------------------------------------------------------------------

//条件编译
//#define NDEBUG//关闭断言
// ---------------------------------- - 02【头文件包含部分】-------------------------------------- -
//  描述：包含程序所依赖的头文件
//-------------------------------------------------------------------------------------------

#include "ycycommon.h"

// ---------------------------------- - 03【库文件包含部分】-------------------------------------- -
//  描述：包含程序所依赖的库文件
//------------------------------------------------------------------------------------------------
//#pragma comment(linker,"/subsystem:Console")//修改子系统选项为控制台

//-----------------------------------04【宏定义部分】--------------------------------------------
//  描述：定义一些辅助宏
//------------------------------------------------------------------------------------------------

// ---------------------------------- - 05【全局变量声明部分】------------------------------------ -
//  描述：全局变量的声明//------------------------------------------------------------------------------------------------

//-----------------------------------06【全局函数声明部分】-------------------------------------
//  描述：全局函数声明，防止“未声明的标识”系列错误
//------------------------------------------------------------------------------------------------
// 必须要进行前导声明

void menu(void);	 //显示功能菜单
void MainMenu(void); //功能菜单

// ---------------------------------- - 07【Main()函数】--------------------------------------
//  描述：Windows控制台的入口函数，我们的程序从这里开始
//------------------------------------------------------------------------------------------------

int main(int argc, char *argv[])
{
	//设置cmd颜色背景
#ifdef _MSC_VER // 表示是VC
	system("color 7f");
	system("color 3f"); //设置底色 颜色数值如下：0 = 黑色  8 = 灰色 1 = 蓝色  9 = 淡蓝色  2 = 绿色  A = 淡绿色 3 = 湖蓝色 B = 淡浅绿色 4 = 红色 C = 淡红色 5 = 紫色  D = 淡紫色 6 = 黄色  E = 淡黄色 7 = 白色  F = 亮白色
	// 3代表背景色，f代表前景色
	system("mode con cols=80 lines=25"); //窗体设置宽度和高高度的
	system("title 数据结构实验课程");	 //窗体控制台的标题
										 // system("cls");//清幕
#endif

	MainMenu();

	//解决编译运行后窗口一闪而过问题
	std::cin.ignore(std::cin.rdbuf()->in_avail() + 1); //方法1
	//等待用户按Enter程序将继续执行，否则不执行
	// rdbuf()获取cin的输入缓冲区,in_avail获取输入缓冲中存在的字符数
	//连在一起：获取cin输入缓冲中，还有多少字节没有处理的数据//
	// std::cin.ignore();//有些程序会失效

	//_getch();//方法2暂停，从键盘上读入一个字符，字符不回显在屏幕上，是一个等待型的函数，
	//就是说它会等待用户从键盘上输入一个字符，否则它不会执行完成
	// system("pause");//方法3
	// while (1);//方法4：无限循环

	return EXIT_SUCCESS; // return 0;
						 // EXIT_SUCCESS告知操作系统本程序正常结束,而其他返回值(EXIT_FAILURE)则告知操作系统异常结束.
}

//-----------------------------------08【子函数】--------------------------------------
//  描述：各种子函数实现
//------------------------------------------------------------------------------------------------

void menu()
{ //显示功能菜单
	cout << "============================总菜单================================" << endl;
	cout << "1：第1章\t";
	cout << "2：第2章 线性表\t";
	cout << "3：第3章\t";
	cout << "4：第4章\t";
	cout << "5：第5章\t";
	cout << "6：第6章\t";
	cout << "7：第7章\t";
	cout << "8：第8章\t";
	cout << "9：第9章\t";
	cout << "10：第10章\t";
	cout << "0:退出.\n\r";
	cout << "============================总菜单===============================" << endl;
}

void MainMenu(void)
{ //功能菜单
	int ycyselelct;
	menu();
	cout << "请选择：";
	cin >> ycyselelct;
	while (1)
	{
		switch (ycyselelct)
		{
		case 1:

			break;
		case 2:
			ChapterMainMenu2();
			break;
		case 3:

			break;

		case 4:

			break;

		case 5:

			break;
		case 6:

			break;
		case 7:

			break;
		case 8:

			break;
		default:

			break;
		}
		if (ycyselelct == 0)
		{
			cout << "please enter 'Enter' escape!";
			break;
		}

		else
		{
			menu();
			cout << "请选择：";
			cin >> ycyselelct;
		}
	}
}